#!/usr/bin/env node

// Dependencies
var Clp = require("clp")
  , Package = require("../package")
  , GitStatsImporter = require("../")
  , Logger = require("bug-killer")
  ;

// Configuration
Logger.config.import = {
    color: [46, 204, 113]
  , text: "import"
  , level: 3
};

Logger.config.delete = {
    color: [231, 76, 60]
  , text: "delete"
  , level: 3
};

// Create options and add them
var findReposOpt = new Clp.Option(["f", "find-repos"], "If this option is provided, the importer will search for repositories in the provided path (recursively).", "path", process.cwd())
  , deleteOpt = new Clp.Option(["d", "delete"], "Delete the commits from selected repositories.")
  , emailOpt = new Clp.Option(["e", "emails"], "Comma separated emails you want to include in the import process. By default it's the $GIT_AUTHOR_EMAIL value.", "emails", process.env.GIT_AUTHOR_EMAIL)
  , parser = new Clp({
        name: "Git Stats Importer"
      , version: Package.version
      , process: true
      , exe: Package.name
      , examples: [
            "git-stats-importer # imports the commits from the current repository"
          , "git-stats-importer --delete # deletes the commits from the current repo"
          , "git-stats-importer --find-repos ~/github # searches for repositories in the ~/github dir"
          , "git-stats-importer --delete --find-repos ~/github # deletes the commits from the ~/github dir"
        ]
      , docs_url: Package.homepage
    }, [findReposOpt, deleteOpt, emailOpt])
  ;

if (emailOpt.value) {
    emailOpt.value = emailOpt.value.split(",").map(function (c) {
        return c.trim();
    });
}

// Start importing
var importer = GitStatsImporter({
    delete: deleteOpt.is_provided
  , path: findReposOpt.value
  , recursive: findReposOpt.is_provided
  , emails: emailOpt.value
});

if (findReposOpt.is_provided) {
    Logger.log("Searching for git repositories in the provided path. This may take a while.");
}

// Output for git folders
importer.on("gitFolder", function (dir) {
    Logger.log("Found git project in: " + dir);
});

// Listen for import
importer.on("import", function (data) {
    Logger.log([data.path, data.commit.hash, data.commit.author.email].join(":"), "import");
});

// Listen for delete
importer.on("delete", function (data) {
    Logger.log([data.path, data.commit.hash].join(":"), "delete");
});

// Listen for import
importer.on("error", function (err, data) {
    Logger.log(err, "error");
});

// Listen for finish
importer.on("finish", function (err, data) {
    if (err) {
        return Logger.log(err, "error");
    }
    Logger.log("Done.");
});
